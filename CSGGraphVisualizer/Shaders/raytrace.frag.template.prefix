#version 410

layout(location = 0) in vec2 fs_in_tex;
out vec4 fs_out_col;
uniform sampler2D texImg;

uniform float iTime;
uniform vec2 iResolution;
uniform vec3 cameraPos;
uniform vec3 cameraAt;
uniform mat3 cameraView;

const float pi = 3.1415926535897932384626433832795;
    
// Arbitrarily small value
float eps = 0.01;

struct ray_t {
    vec3 start;
    vec3 direction;
};

struct Material {
    vec3  color;        // [0, 1/pi]    reflective color
    float roughness;    // [0, 7]       shininess
    vec3 emission;		// [0, inf]     light emitting surface if nonzero
    float metalness;    // [0.02, 0.05] for non-metals, [0.6, 0.9] for metals
};

// Materials
#define LIGHTSRC(r,g,b)   Material(vec3(0,0,0)   , 1.     , vec3(r,g,b), 0.  )
#define METALLIC(r,g,b,m) Material(vec3(r,g,b)/pi,float(m), vec3(0,0,0), 0.9 )
#define NONMETAL(r,g,b,m) Material(vec3(r,g,b)/pi,float(m), vec3(0,0,0), 0.02)

Material colors[] = Material[](
    METALLIC(.6,.4,.1,0.03),
    NONMETAL(.15,.01,1,.1),
    NONMETAL(.1,1,.5,1),
    NONMETAL(1,1,1,0.3),
    LIGHTSRC(30,30,30),
    LIGHTSRC(10,0,0),
    LIGHTSRC(0,0,5)
);

struct Lightsource {
    vec3 position;
    float radius;
    vec3 emission;
    bool dynamic;
};

Lightsource lights[] = Lightsource[](
    Lightsource(vec3(0),0.4,vec3(30.,30.,30.),true),
    Lightsource(vec3(-5.,10.,10.),0.4,vec3(10.,0.,0.),false),
    Lightsource(vec3(-5.,1.,0.),0.4,vec3(0.,0.,5.),false)
);  

//const Material colors[] = Material[](
//    METALLIC(.6,.4,.1,0.03),
//    METALLIC(.15,.01,1,.1),
//    METALLIC(.1,1,.5,1),
//    NONMETAL(1,1,1,0.3),
//    LIGHTSRC(80,80,80)
//);

struct Value {float d; int mat;};

float max3(vec3 v){	return max(v.x, max(v.y, v.z)); }
float sum(vec3 v){ return v.x + v.y + v.z; }

// SDF Primitives

float sphere(vec3 p, float r){
    return length(p) - r;
}
float box(vec3 p, vec3 b){ //from	https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
	vec3 d = abs(p) - b;
    return length(max(d,0.))+min(max3(d),0.);
}

// Infinite cylinders
float cylinderZ(vec3 p, float r){ return length(p.xy) - r; }
float cylinderY(vec3 p, float r){return cylinderZ(p.xzy,r);}
float cylinderX(vec3 p, float r){return cylinderZ(p.zyx,r);}

// Finite cylinders
float cylinderZ(vec3 p, vec2 h){
    vec2 d = abs(vec2(length(p.xy), abs(p.z))) - h;
    return min(max(d.x, d.y), 0.) + length(max(d,0.));
}
float cylinderY(vec3 p, vec2 h){return cylinderZ(p.xzy,h);}
float cylinderX(vec3 p, vec2 h){return cylinderZ(p.zyx,h);}

// SDF

vec3 getLightPos()
{
//    return vec3(10,10,10);
    float t = 2.*pi + iTime;
//    return vec3(10.,5.1+cos(t*2.)*5.,5);
    return vec3(10.,5.,1.+cos(t*1.)*5.);
    //return vec3(10.,4.1+cos(t*2.)*5.,10.);
}
